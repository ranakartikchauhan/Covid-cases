# -*- coding: utf-8 -*-
"""CovidCases.ipynb की कॉपी

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mn0ZnB1F_Nl_OJ_i2le3TTvK2AJIN2ah
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# covid_19_dataset.csv

MainData=pd.read_csv("covid_19_dataset.csv")
print(type(MainData))
print(MainData.info())

print(MainData.head())
print("-------------------------")
print(MainData.head(2))

print(MainData.tail())
print("-------------------------")
print(MainData.tail(2))

# Removing unneccesary columns
MainData.drop(["Province/State","Lat","Long","WHO Region"],axis=1,inplace=True)

print(MainData.head())

print(MainData.tail())
print(MainData.shape)

Top=MainData[MainData["Date"]==MainData["Date"].max()]
print(Top)
print(Top.shape)

print(Top[Top["Country/Region"]=="India"])

print(Top[Top["Country/Region"]=="China"])

print(len(Top['Country/Region'].unique()))

print(Top.head())

# Group By command
World=Top.groupby("Country/Region")["Confirmed","Deaths","Active","Recovered"].sum()
World=World.reset_index()
print(World.head())
print(World.shape)

print(World[World["Country/Region"]=="India"])

print(World[World["Country/Region"]=="China"])

print(int(World[World["Country/Region"]=="India"].Confirmed))

# plot the confirmed cases of India, China and Afganistan
Ind=int(World[World["Country/Region"]=="India"].Confirmed)
Chin=int(World[World["Country/Region"]=="China"].Confirmed)
Afg=int(World[World["Country/Region"]=="Afghanistan"].Confirmed)

plt.bar([1,2,3],[Ind,0,0],color="r")
plt.bar([1,2,3],[0,Chin,0],color="b")
plt.bar([1,2,3],[0,0,Afg],color="g")
plt.show()

plt.bar([1],[Ind],color="r")
plt.bar([2],[Chin],color="b")
plt.bar([3],[Afg],color="g")
plt.show()

# Advanced Plotting
# Plotting of all the confirmed cases on World Map

import plotly.express as px
Myworld=px.choropleth(World,locations="Country/Region",locationmode="country names",
                      color_continuous_scale="blues",color="Confirmed",
                      range_color=[1,50000],title="Confirmed Cases")
Myworld

# Main Processing
Ind=MainData[MainData["Country/Region"]=="India"]
plt.plot(Ind.Date,Ind.Confirmed)
plt.show()
print(Ind.shape)

# Main Processing
Chn=MainData[MainData["Country/Region"]=="China"]
plt.plot(Chn.Date,Chn.Confirmed)
plt.show()
print(Chn.shape)

Chn1=Chn.groupby("Date")["Confirmed","Deaths","Active","Recovered"].sum()
Chn1=Chn1.reset_index()
plt.plot(Chn1.Date,Chn1.Confirmed)
plt.show()
print(Chn1.shape)

print(MainData.shape)
PrcsData=MainData.groupby("Date")["Confirmed","Deaths","Active","Recovered"].sum()
PrcsData=PrcsData.reset_index()
print(PrcsData.head())
print(PrcsData.shape)

!pip install pystan==2.19.1.1 prophet
from prophet import Prophet
# Prerequesties
# A refined dataset
  # Split the whole data into sets 
  #  1) Training dataset 
  #  2) Testing Dataset

# Biasing/unbiasing
# Balancing of data (Smote/Oversampling,Under sampling)

Model=Prophet(interval_width=0.8)
# Model Object Creation
# Defining Hyperparameters
# Training The network
# Testing The network

print(PrcsData.info())

Mydata=PrcsData[['Date',"Confirmed"]]
print(Mydata.head())

Mydata.rename(columns={"Date":"ds","Confirmed":"y"},inplace=True)
print(Mydata.head())

Mydata["ds"]=pd.to_datetime(Mydata["ds"])
print(Mydata.head())
print(Mydata.info())

# Data Formatting for Facebook Prophet
# Date/time
# Data (Confirmed,Active,Deaths,Recovered)

# Date/time : ds, data type : datetime
# data: y

print(Model)
Model.fit(Mydata)

# Evaluation/Testing
futuredates=Model.make_future_dataframe(periods=30)

print(futuredates)

Outcome=Model.predict(futuredates)
Outcome[["ds","yhat"]].tail(10)

ypred=Outcome["yhat"]

import matplotlib.pyplot as plt
plt.plot(ypred)
plt.plot(Mydata["y"])
plt.show()

Weekoutcom=Model.plot_components(Outcome)

out=Model.plot(Outcome)

# Individual date prediction
tmp=pd.DataFrame()
tmp["ds"]=pd.to_datetime(["2020-09-20"])
print(tmp)
SinOut=Model.predict(tmp)
print(SinOut["yhat"])

# WAP to train 4 different network in terms of 
# Confirmed cases, 
# Deaths
# Active
# Recovered
# After training get input from the user that 
# Wht he want to predict in form of 1, 2, 3, 4
# 1-c, 2-D, 3-A, 4-R
# after this get whether he want to predict a single date 
# if yes get dd-mm-year
# else case 2 for a count of days
# then get number of days from user 
# finally plot the predicted outcomes
